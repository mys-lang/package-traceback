class TracebackEntry:
    """A traceback entry with file path, line number, function and source
    code.

    """

    path: string
    line_number: i64
    function: string
    source_code: string

class Traceback:
    """A traceback.

    """

    stack: [TracebackEntry]

    func __str__(self) -> string:
        lines = ["Traceback (most recent call last):"]

        for entry in self.stack:
            lines.append(f"  File: \"{entry.path}\", line {entry.line_number} "
                         f"in {entry.function}")
            lines.append(f"    {entry.source_code}")

        return "\n".join(lines)

func traceback() -> Traceback:
    """Returns the current traceback.

    """

    stack: [TracebackEntry] = []
    path: string = None
    line_number: i64 = -1
    function: string = None
    source_code: string = None

    c"""
    #if defined(MYS_TRACEBACK)

    mys::TracebackEntry *item_p;
    mys::TracebackEntryInfo *entry_info_p;

    item_p = mys::traceback_bottom_p->next_p;

    while (item_p != mys::traceback_top_p) {
        path = String(item_p->info_p->path_p);
        entry_info_p = &item_p->info_p->entries_info_p[item_p->index];
        line_number = entry_info_p->line_number;
        function = String(entry_info_p->name_p);
        source_code = String(entry_info_p->code_p);
    """

    stack.append(TracebackEntry(path, line_number, function, source_code))

    c"""
        item_p = item_p->next_p;
    }

    #endif
    """

    return Traceback(stack)

test traceback():
    tb = traceback()

    assert len(tb.stack) == 1

    entry = tb.stack[0]
    assert entry.path == "./src/lib.mys"
    assert entry.line_number == 68
    assert entry.function == "traceback"
    assert entry.source_code == "tb = traceback()"

    assert str(tb) == (
        "Traceback (most recent call last):\n"
        "  File: \"./src/lib.mys\", line 68 in traceback\n"
        "    tb = traceback()")
